com/algorithmia/algo/AcceptsJson = Com.Algorithmia.Algo.IAcceptsJson
com/algorithmia/algo/AlgoAsyncResponse = Com.Algorithmia.Algo.AlgoAsyncResponse
  <init>(Ljava/lang/String;Ljava/lang/String;)V = .ctor(string, string)
  getAsyncProtocol()Ljava/lang/String; = AsyncProtocol
  getRequestId()Ljava/lang/String; = RequestId
com/algorithmia/algo/AlgorithmRef = Com.Algorithmia.Algo.AlgorithmRef
  <init>(Ljava/lang/String;)V = .ctor(string)
  algoUri = AlgoUri
  getUrl()Ljava/lang/String; = Url
com/algorithmia/algo/ContentType = Com.Algorithmia.Algo.ContentType
  Binary = Binary
  Json = Json
  name = Name
  Text = Text
  Void = Void
  fromString(Ljava/lang/String;)Lcom/algorithmia/algo/ContentType; = FromString(string)
  valueOf(Ljava/lang/String;)Lcom/algorithmia/algo/ContentType; = ValueOf(string)
  values()[Lcom/algorithmia/algo/ContentType; = Values()
com/algorithmia/algo/Metadata = Com.Algorithmia.Algo.Metadata
  <init>(Lcom/algorithmia/algo/ContentType;Ljava/lang/Double;)V = .ctor(Com.Algorithmia.Algo.ContentType, Java.Lang.Double)
  <init>(Lcom/algorithmia/algo/ContentType;Ljava/lang/Double;Ljava/lang/String;)V = .ctor(Com.Algorithmia.Algo.ContentType, Java.Lang.Double, string)
  getContentType()Lcom/algorithmia/algo/ContentType; = ContentType
  getDuration()Ljava/lang/Double; = Duration
  getStdout()Ljava/lang/String; = Stdout
com/algorithmia/algo/ReturnsJson = Com.Algorithmia.Algo.IReturnsJson
com/algorithmia/AlgorithmException = Com.Algorithmia.AlgorithmException
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Lcom/algorithmia/AlgorithmException;Ljava/lang/String;)V = .ctor(string, Com.Algorithmia.AlgorithmException, string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
  <init>(Ljava/lang/Throwable;)V = .ctor(Java.Lang.Throwable)
  stacktrace = Stacktrace
com/algorithmia/Algorithmia = Com.Algorithmia.Algorithmia
  client()Lcom/algorithmia/AlgorithmiaClient; = Client()
  client(I)Lcom/algorithmia/AlgorithmiaClient; = Client(int)
  client(Ljava/lang/String;)Lcom/algorithmia/AlgorithmiaClient; = Client(string)
  client(Ljava/lang/String;I)Lcom/algorithmia/AlgorithmiaClient; = Client(string, int)
com/algorithmia/AlgorithmiaClient = Com.Algorithmia.AlgorithmiaClient
com/algorithmia/AlgorithmiaConf = Com.Algorithmia.AlgorithmiaConf
  apiAddress()Ljava/lang/String; = ApiAddress()
  apiKey()Ljava/lang/String; = ApiKey()
com/algorithmia/data/AbstractDataIterator = Com.Algorithmia.Data.AbstractDataIterator
  marker = Marker
  hasNext()Z = HasNext
  loadNextPage()V = LoadNextPage()
  newDataObjectInstance(Ljava/lang/String;)Ljava/lang/Object; = NewDataObjectInstance(string)
  next()Ljava/lang/Object; = Next()
  remove()V = Remove()
  setChildrenAndMarker(Ljava/util/List;Ljava/lang/String;)V = SetChildrenAndMarker(System.Collections.Generic.IList<string>, string)
com/algorithmia/data/DataAcl = Com.Algorithmia.Data.DataAcl
  <init>(Lcom/algorithmia/data/DataAclType;)V = .ctor(Com.Algorithmia.Data.DataAclType)
  MY_ALGOS = MyAlgos
  PRIVATE = Private
  PUBLIC = Public
  read = Read
  getReadPermissions()Lcom/algorithmia/data/DataAclType; = ReadPermissions
  fromAclResponse(Ljava/util/Map;)Lcom/algorithmia/data/DataAcl; = FromAclResponse(System.Collections.Generic.IDictionary<string, System.Collections.Generic.IList<string>>)
com/algorithmia/data/DataAclType = Com.Algorithmia.Data.DataAclType
  <init>(Ljava/util/List;)V = .ctor(System.Collections.Generic.IList<string>)
  MY_ALGOS = MyAlgos
  MY_ALGOS_PERMISSIONS = MyAlgosPermissions
  PRIVATE = Private
  PUBLIC = Public
  PUBLIC_PERMISSIONS = PublicPermissions
  getAclStrings()Ljava/util/List; = AclStrings
  fromAclStrings(Ljava/util/List;)Lcom/algorithmia/data/DataAclType; = FromAclStrings(System.Collections.Generic.IList<string>)
com/algorithmia/data/DataObject = Com.Algorithmia.Data.DataObject
  dataType = DataType
  path = Path
  isDirectory()Z = IsDirectory
  isFile()Z = IsFile
  getName()Ljava/lang/String; = Name
  getType()Lcom/algorithmia/data/DataObject$DataObjectType; = Type
  getUrl()Ljava/lang/String; = Url
  exists()Z = Exists()
